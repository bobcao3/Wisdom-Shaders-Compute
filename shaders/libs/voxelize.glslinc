#define volume_width 128 // [64 128 256]
#define volume_height 128 // [64 128 256]

#include "/configs.glsl"

// const int shadowMapResolution = 1024; // [512 1024 2048 4096]

const int volume_depth_grid_width = (shadowMapResolution / volume_width);
const int volume_depth_grid_height = (shadowMapResolution / volume_height / 2);

const int volume_depth = shadowMapResolution * shadowMapResolution / volume_width / volume_height / 2;

const int volume_width_log = int(log2(volume_width));
const int volume_height_log = int(log2(volume_width));
const int volume_depth_log = int(log2(volume_width));

const int shadowmap_width_log = int(log2(shadowMapResolution));
const int shadowmap_height_log = int(log2(shadowMapResolution)) - 1;

ivec3 getVolumePos(vec3 world_pos, vec3 world_camera_pos)
{
    return ivec3(floor(world_pos + mod(world_camera_pos, 1.0))) + ivec3(volume_width, volume_depth, volume_height) / 2;
}

ivec2 volume2planar(ivec3 pos)
{
    if (pos.x < 0 || pos.x >= volume_width || pos.y < 0 || pos.y >= volume_depth || pos.z < 0 || pos.z >= volume_height) return ivec2(-1);

    uint unrolled_index = (pos.y << (volume_height_log + volume_width_log)) | (pos.x << (volume_height_log)) | (pos.z);
    ivec2 index2d = ivec2(unrolled_index & (shadowMapResolution - 1), unrolled_index >> shadowmap_width_log);

    return index2d;
}

ivec3 planar2volume(ivec2 uv)
{
    // ivec2 y_grid = uv / ivec2(volume_width, volume_height);
    // ivec2 xz_pos = uv % ivec2(volume_width, volume_height);
    // ivec3 wpos = ivec3(xz_pos.x, y_grid.x + y_grid.y * volume_depth_grid_width, xz_pos.y);

    uint unrolled_index = (uv.y << shadowmap_width_log) | uv.x;
    ivec3 index3d = ivec3((unrolled_index >> volume_height_log) & (volume_width - 1), unrolled_index >> (volume_height_log + volume_width_log), unrolled_index & (volume_height - 1));

    return index3d;
}