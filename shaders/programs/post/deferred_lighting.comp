layout (local_size_x = 8, local_size_y = 8) in;

const vec2 workGroupsRender = vec2(1.0f, 1.0f);

uniform int frameCounter;
uniform float aspectRatio;

uniform vec2 invWidthHeight;

uniform sampler2D colortex0;
uniform sampler2D colortex3;
uniform sampler2D colortex4;
uniform sampler2D colortex6;
uniform sampler2D colortex7;
uniform sampler2D colortex8;
uniform sampler2D colortex15;

layout (r11f_g11f_b10f) uniform image2D colorimg2;

#include "/libs/transform.glsl"
#include "/libs/noise.glsl"

#include "./gtao_spatial.glsl"

#include "/configs.glsl"

uniform sampler2D shadowtex1;

vec3 ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness)
{
    float a = roughness;
	
    float phi = 2.0 * PI * Xi.x;
    float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));
    float sinTheta = sqrt(1.0 - cosTheta*cosTheta);
	
    // from spherical coordinates to cartesian coordinates
    vec3 H;
    H.x = cos(phi) * sinTheta;
    H.y = sin(phi) * sinTheta;
    H.z = cosTheta;
	
    // from tangent-space vector to world-space sample vector
    vec3 up        = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
    vec3 tangent   = normalize(cross(up, N));
    vec3 bitangent = cross(N, tangent);
	
    vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
    return normalize(sampleVec);
}

vec3 fresnelSchlickRoughness(float cosTheta, vec3 F0, float roughness) {
    return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow5(max(1.0 - cosTheta, 0.001));
}

bool match(float a, float b)
{
	return (a > b - 0.002 && a < b + 0.002);
}

vec3 getF(float metalic, float roughness, float cosTheta)
{
	if (metalic < (229.5 / 255.0))
    {
        float metalic_generated = 1.0 - metalic * (229.0 / 255.0);
        metalic_generated = pow(metalic_generated, 2.0);
		return fresnelSchlickRoughness(cosTheta, vec3(metalic_generated), roughness);
    }

	#include "materials.glsl"

	cosTheta = max(0.01, abs(cosTheta));

	vec3 NcosTheta = 2.0 * N * cosTheta;
	float cosTheta2 = cosTheta * cosTheta;
	vec3 N2K2 = N * N + K * K;

	vec3 Rs = (N2K2 - NcosTheta + cosTheta2) / (N2K2 + NcosTheta + cosTheta2);
	vec3 Rp = (N2K2 * cosTheta2 - NcosTheta + 1.0) / (N2K2 * cosTheta2 + NcosTheta + 1.0);

	return (Rs + Rp) * 0.5;
}

uniform sampler2D shadowcolor1;

float VSM(float t, vec2 uv)
{
    vec2 means = texture(shadowcolor1, uv).rg;
    float e_x = means.x;
    float var = means.y - e_x * e_x;

    float p_max = (var + 1e-7) / (var + pow2(max(0.0, t - e_x)) + 1e-7);

    const float c = 600;

    float depth_test_exp = clamp(exp(-c * (t - e_x)), 0.0, 1.0);

    return min(p_max, depth_test_exp);
}

float shadowTexSmooth(in sampler2D tex, in vec3 spos, out float depth, float bias) {
    if (clamp(spos, vec3(0.0), vec3(1.0)) != spos) return 1.0;

    return VSM(spos.z, spos.xy);
}

#define VL

#include "/libs/atmosphere.glsl"

vec3 orenNayarDiffuse(vec3 lightDirection, vec3 viewDirection, vec3 surfaceNormal, float roughness, vec3 albedo, float subsurface) {  
    float LdotV = dot(lightDirection, viewDirection);
    float NdotL = dot(lightDirection, surfaceNormal);
    float NdotV = dot(surfaceNormal, viewDirection);

    float s = LdotV - NdotL * NdotV;
    float t = mix(1.0, max(NdotL, NdotV), step(0.0, s));

    float sigma2 = roughness * roughness;
    vec3 A = 1.0 + sigma2 * (albedo / (sigma2 + 0.13) + 0.5 / (sigma2 + 0.33));
    float B = 0.45 * sigma2 / (sigma2 + 0.09);

    return albedo * max(vec3(subsurface), NdotL * (A + B * s / t)) / PI;
}

void main()
{
    ivec2 iuv = ivec2(gl_GlobalInvocationID.xy);
    vec2 uv = (vec2(iuv) + 0.5) * invWidthHeight;

    float depth = texelFetch(depthtex0, iuv, 0).r;

    vec3 proj_pos = getProjPos(uv, depth);
    vec3 view_pos = proj2view(proj_pos);
    vec3 world_pos = view2world(view_pos);
    vec3 world_dir = normalize(world_pos);

    float hash1d = texelFetch(colortex15, (iuv + ivec2(WeylNth(frameCounter & 0xFFFF) * 256)) & 0xFF, 0).r;    
    
    vec3 color = vec3(0.0);

    vec3 world_sun_dir = mat3(gbufferModelViewInverse) * (sunPosition * 0.01);


    if (depth < 1.0)
    {
        vec3 albedo = texelFetch(colortex6, iuv, 0).rgb;

        vec4 normal_flag_encoded = texelFetch(colortex7, iuv, 0);

        // --------------------------------------------------------------------
        //  IBL + AO (Indirect)
        // --------------------------------------------------------------------
        vec3 image_based_lighting = vec3(0.0);

        #define LIGHTING_SAMPLES 4 // [4 8 16]

        float rand1d = hash1d * 65536.0;

        float roughness = 1.0;
        float metalic = 0.0;

        vec2 lmcoord = texelFetch(colortex8, iuv, 0).rg;

        vec3 view_normal = normal_flag_encoded.rgb;
        vec3 world_normal = normalize(mat3(gbufferModelViewInverse) * view_normal);

        for (int i = 0; i < LIGHTING_SAMPLES; i++)
        {
            vec2 rand2d = WeylNth(int(rand1d) * LIGHTING_SAMPLES + i + (frameCounter & 0xF));

            vec3 H = ImportanceSampleGGX(rand2d, world_normal, roughness);
            vec3 sample_dir = normalize(2.0 * dot(-world_dir, H) * H + world_dir);

            if (dot(sample_dir, world_normal) <= 0.0)
            {
                sample_dir = reflect(sample_dir, world_normal);
            }

            vec2 skybox_uv = project_skybox2uv(sample_dir);

            int skybox_lod = int(ceil(pow(roughness, 0.25) * 6.0));

            vec3 skybox_color = sampleLODmanual(colortex3, skybox_uv, skybox_lod).rgb;

            image_based_lighting += skybox_color * max(0.0, dot(world_normal, sample_dir));
        }

        image_based_lighting *= 1.0 / (float(LIGHTING_SAMPLES));

        vec3 F = getF(metalic, roughness, abs(dot(world_dir, world_normal)));
        image_based_lighting *= F;
        
        vec3 ao = getAO(iuv, depth, albedo);

        color += (albedo) * ((ao * lmcoord.y) * image_based_lighting);

        // --------------------------------------------------------------------
        //  Block-light
        // --------------------------------------------------------------------

        color += (albedo / PI) * max(1.0 / (pow2(max(0.95 - lmcoord.x, 0.0) * 6.0) + 1.0) - 0.05, 0.0);

        // --------------------------------------------------------------------
        //  Directional
        // --------------------------------------------------------------------

        float shadow_depth;

        vec3 shadow_pos_linear = world2shadowProj(world_pos) * 0.5 + 0.5;

        float shadow = shadowTexSmooth(shadowtex1, shadow_pos_linear, shadow_depth, 0.0);
        
        vec3 sun_radiance = shadow * texelFetch(colortex3, ivec2(viewWidth - 1, 0), 0).rgb;

        vec3 view_dir = normalize(view_pos);

        color += orenNayarDiffuse(shadowLightPosition * 0.01, view_dir, view_normal, roughness, albedo, normal_flag_encoded.a) * sun_radiance;

        float shadow_depth_diff = max(shadow_pos_linear.z - shadow_depth, 0.0);

        // --------------------------------------------------------------------
        //  Emission
        // --------------------------------------------------------------------

        if (normal_flag_encoded.a < 0.0)
        {
            color = albedo * 3.14;
        }
    }
    else
    {
        color += starField(world_dir) * 5.0;
        color += smoothstep(0.9999, 0.99991, dot(world_sun_dir, world_dir)) * texelFetch(colortex3, ivec2(viewWidth - 1, 0), 0).rgb * 20.0;        
    }

    float l_limit = Ra;

    // if (world_dir.y <= 0.0)
    // {
    //     l_limit = min(l_limit, (cameraPosition.y + 1.0) / abs(world_dir.y));
    // }

    if (depth < 1.0) l_limit = length(world_pos);

    vec4 skybox_color = scatter(vec3(0.0, cameraPosition.y, 0.0), world_dir, world_sun_dir, l_limit, hash1d);
    color = color * skybox_color.a + skybox_color.rgb;

    imageStore(colorimg2, iuv, vec4(color, 0.0));
}