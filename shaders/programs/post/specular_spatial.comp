#include "/libs/compat.glsl"

layout (local_size_x = 16, local_size_y = 16) in;

const vec2 workGroupsRender = vec2(0.5f, 0.5f);

uniform vec2 invWidthHeight;

uniform int frameCounter;

layout (r11f_g11f_b10f) uniform image2D colorimg5;

uniform sampler2D colortex5;
uniform usampler2D colortex6;
uniform sampler2D colortex7;

#include "/libs/transform.glsl"
#include "/libs/color.glslinc"
#include "/libs/noise.glsl"

mat3 make_coord_space(const vec3 n) {
    const vec3 h = (abs(n.y) > 0.9) ? vec3(1.0, 0.0, 0.0) : vec3(0.0, 1.0, 0.0);

    const vec3 y = normalize(cross(h, n));
    const vec3 x = cross(n, y);

    return mat3(x, y, n);
}

vec3 getDominantDirection(vec3 N, vec3 V, float roughness)
{
    float f = (1.0 - roughness) * (sqrt(1.0 - roughness) + roughness);
    vec3 R = reflect(-V, N);
    vec3 dir = mix(N, R, f);

    return normalize(dir);
}

float roughnessWeight(float w0, float w1)
{
    float norm = w0 * w0 * 0.99 + 0.01;
    float w = abs(w0 - w1) / norm;

    return clamp(1.0 - w, 0.0, 1.0);
}

void main()
{
    ivec2 iuv = ivec2(gl_GlobalInvocationID.xy) * 2;
    ivec2 iuv_orig = ivec2(gl_GlobalInvocationID.xy);
    vec2 uv = (vec2(iuv) + 1.0) * invWidthHeight;

    if (uv.x > 1.0 || uv.y > 1.0)
    {
        return;
    }

    z1 = z2 = z3 = z4 = uint((texelFetch(noisetex, iuv_orig & 0xFF, 0).r * 65535.0) * 1000) ^ uint(frameCounter * 11);
    getRand();

    vec3 color = vec3(0.0);

    float depth = texelFetch(depthtex0, iuv, 0).r;

    vec3 proj_pos = getProjPos(uv, depth);
    vec3 view_pos = proj2view(proj_pos);
    vec3 world_pos = view2world(view_pos);
    vec3 world_dir = normalize(world_pos);
    vec3 view_dir = normalize(view_pos);

    vec3 world_normal = texelFetch(colortex7, iuv, 0).rgb;
    vec3 view_normal = normalize(mat3(gbufferModelView) * world_normal);

    uvec2 albedo_specular = texelFetch(colortex6, iuv, 0).xy;

    vec3 albedo = fromGamma(unpackUnorm4x8(albedo_specular.x).rgb);
    vec4 lm_specular_encoded = unpackUnorm4x8(albedo_specular.y);

    float roughness = pow2(1.0 - lm_specular_encoded.b);

    vec3 dominant_direction = getDominantDirection(view_normal, normalize(view_pos), roughness);
    mat3 o2w = make_coord_space(dominant_direction);

    float total_weight = 1.0;

    color += texelFetch(colortex5, iuv_orig, 0).rgb;

    for (int i = 0; i < 8; i++)
    {
        float r = getRand();
        float phi = (float(i) + getRand()) / 8.0 * 2.0 * 3.1415926;

        vec2 offset = vec2(cos(phi), sin(phi)) * r * 0.5;
        vec3 offset_view_pos = view_pos + o2w * vec3(offset, 0.0);
        vec3 offset_proj_pos = view2proj(offset_view_pos);

        vec2 sample_uv = offset_proj_pos.xy * 0.5 + 0.5;

        vec4 lm_specular_encoded = unpackUnorm4x8(texture(colortex6, sample_uv, 0).y);
        float sample_roughness = pow2(1.0 - lm_specular_encoded.b);

        vec3 sample_normal = texture(colortex7, sample_uv).rgb;

        float sample_depth = texture(depthtex0, sample_uv, 0).r;
        vec3 sample_proj_pos = getProjPos(sample_uv, sample_depth);
        vec3 sample_view_pos = proj2view(sample_proj_pos);
        float plane_distance = 4.0 * abs(dot(sample_view_pos - view_pos, dominant_direction));

        float weight =
            roughnessWeight(roughness, sample_roughness) *
            clamp(1.0 - plane_distance, 0.0, 1.0) *
            pow(max(0.0, dot(sample_normal, world_normal)), 128.0) *
            float(sample_depth < 1.0);

        if (isNanInf(weight)) weight = 0.0;

        vec3 s = texture(colortex5, clamp(sample_uv * 0.5, vec2(0.0), vec2(0.5))).rgb;

        if (isNanInf(s)) s = vec3(0.0);

        color += s * weight;
        total_weight += weight;
    }

    color /= total_weight;

    imageStore(colorimg5, iuv_orig, vec4(color, 0.0));
}