#include "/libs/compat.glsl"

layout (local_size_x = 16, local_size_y = 16) in;

const ivec3 workGroups = ivec3(128, 128, 1);

uniform sampler2D shadowtex0;
//uniform sampler2D shadowcolor1;

float gaussian[] = float[] (
    0.06136, 0.24477, 0.38774, 0.24477, 0.06136
);

layout (rg32f) uniform image2D shadowcolorimg1;

int getIndex(ivec2 uv)
{
    return uv.y * int(gl_WorkGroupSize.x + 4) + uv.x;
}

shared float lds_x[(gl_WorkGroupSize.x + 4) * (gl_WorkGroupSize.y + 4)];

void main()
{
    ivec2 iuv = ivec2(gl_GlobalInvocationID.xy);
    ivec2 local_id = ivec2(gl_LocalInvocationID.xy) + 2;

    // Load the padding
    {
        int index = int(gl_LocalInvocationIndex);
        const int padded_width = int(gl_WorkGroupSize.x + 4);
        const int local_size = int(gl_WorkGroupSize.x * gl_WorkGroupSize.y);
        const int block_size = int((gl_WorkGroupSize.x + 4) * (gl_WorkGroupSize.y + 4));

        ivec2 local_xy = ivec2((index % padded_width) - 2, (index / padded_width) - 2);
        ivec2 pad_uv = ivec2(gl_WorkGroupSize.xy * gl_WorkGroupID.xy) + local_xy;
        lds_x[getIndex(local_xy + 2)] = texelFetch(shadowtex0, pad_uv, 0).r;

        while (block_size > index + local_size)
        {
            index += local_size;

            ivec2 local_xy = ivec2((index % padded_width) - 2, (index / padded_width) - 2);
            ivec2 pad_uv = ivec2(gl_WorkGroupSize.xy * gl_WorkGroupID.xy) + local_xy;
            lds_x[getIndex(local_xy + 2)] = texelFetch(shadowtex0, pad_uv, 0).r;
        }
    }

    barrier();

    float e_x = 0.0;
    float e_x2 = 0.0;

    for (int i = -2; i <= 2; i++)
    {
        for (int j = -2; j <= 2; j++)
        {
            float d = lds_x[getIndex(local_id + ivec2(i, j))];
            float weight = gaussian[i + 2] * gaussian[j + 2];
            e_x += d * weight;
            e_x2 += d * d * weight;
        }
    }

    imageStore(shadowcolorimg1, iuv, vec4(e_x, e_x2, 1.0, 1.0));
}